unit uGitHub;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.64
//    Generated On: 2015-01-03 15:32:27
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    Web Site    : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

TUploaderClass = class
private
  FAvatar_url: String;
  FEvents_url: String;
  FFollowers_url: String;
  FFollowing_url: String;
  FGists_url: String;
  FGravatar_id: String;
  FHtml_url: String;
  FId: Extended;
  FLogin: String;
  FOrganizations_url: String;
  FReceived_events_url: String;
  FRepos_url: String;
  FSite_admin: Boolean;
  FStarred_url: String;
  FSubscriptions_url: String;
  FType: String;
  FUrl: String;
public
  property avatar_url: String read FAvatar_url write FAvatar_url;
  property events_url: String read FEvents_url write FEvents_url;
  property followers_url: String read FFollowers_url write FFollowers_url;
  property following_url: String read FFollowing_url write FFollowing_url;
  property gists_url: String read FGists_url write FGists_url;
  property gravatar_id: String read FGravatar_id write FGravatar_id;
  property html_url: String read FHtml_url write FHtml_url;
  property id: Extended read FId write FId;
  property login: String read FLogin write FLogin;
  property organizations_url: String read FOrganizations_url write FOrganizations_url;
  property received_events_url: String read FReceived_events_url write FReceived_events_url;
  property repos_url: String read FRepos_url write FRepos_url;
  property site_admin: Boolean read FSite_admin write FSite_admin;
  property starred_url: String read FStarred_url write FStarred_url;
  property subscriptions_url: String read FSubscriptions_url write FSubscriptions_url;
  property &type: String read FType write FType;
  property url: String read FUrl write FUrl;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TUploaderClass;
end;

TAssetsClass = class
private
  FBrowser_download_url: String;
  FContent_type: String;
  FCreated_at: String;
  FDownload_count: Extended;
  FId: Extended;
  FName: String;
  FSize: Extended;
  FState: String;
  FUpdated_at: String;
  FUploader: TUploaderClass;
  FUrl: String;
public
  property browser_download_url: String read FBrowser_download_url write FBrowser_download_url;
  property content_type: String read FContent_type write FContent_type;
  property created_at: String read FCreated_at write FCreated_at;
  property download_count: Extended read FDownload_count write FDownload_count;
  property id: Extended read FId write FId;
  property name: String read FName write FName;
  property size: Extended read FSize write FSize;
  property state: String read FState write FState;
  property updated_at: String read FUpdated_at write FUpdated_at;
  property uploader: TUploaderClass read FUploader write FUploader;
  property url: String read FUrl write FUrl;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TAssetsClass;
end;

TAuthorClass = class
private
  FAvatar_url: String;
  FEvents_url: String;
  FFollowers_url: String;
  FFollowing_url: String;
  FGists_url: String;
  FGravatar_id: String;
  FHtml_url: String;
  FId: Extended;
  FLogin: String;
  FOrganizations_url: String;
  FReceived_events_url: String;
  FRepos_url: String;
  FSite_admin: Boolean;
  FStarred_url: String;
  FSubscriptions_url: String;
  FType: String;
  FUrl: String;
public
  property avatar_url: String read FAvatar_url write FAvatar_url;
  property events_url: String read FEvents_url write FEvents_url;
  property followers_url: String read FFollowers_url write FFollowers_url;
  property following_url: String read FFollowing_url write FFollowing_url;
  property gists_url: String read FGists_url write FGists_url;
  property gravatar_id: String read FGravatar_id write FGravatar_id;
  property html_url: String read FHtml_url write FHtml_url;
  property id: Extended read FId write FId;
  property login: String read FLogin write FLogin;
  property organizations_url: String read FOrganizations_url write FOrganizations_url;
  property received_events_url: String read FReceived_events_url write FReceived_events_url;
  property repos_url: String read FRepos_url write FRepos_url;
  property site_admin: Boolean read FSite_admin write FSite_admin;
  property starred_url: String read FStarred_url write FStarred_url;
  property subscriptions_url: String read FSubscriptions_url write FSubscriptions_url;
  property &type: String read FType write FType;
  property url: String read FUrl write FUrl;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TAuthorClass;
end;

TReleaseClass = class
private
  FAssets: TArray<TAssetsClass>;
  FAssets_url: String;
  FAuthor: TAuthorClass;
  FBody: String;
  FCreated_at: String;
  FDraft: Boolean;
  FHtml_url: String;
  FId: Extended;
  FName: String;
  FPrerelease: Boolean;
  FPublished_at: String;
  FTag_name: String;
  FTarball_url: String;
  FTarget_commitish: String;
  FUpload_url: String;
  FUrl: String;
  FZipball_url: String;
public
  property assets: TArray<TAssetsClass> read FAssets write FAssets;
  property assets_url: String read FAssets_url write FAssets_url;
  property author: TAuthorClass read FAuthor write FAuthor;
  property body: String read FBody write FBody;
  property created_at: String read FCreated_at write FCreated_at;
  property draft: Boolean read FDraft write FDraft;
  property html_url: String read FHtml_url write FHtml_url;
  property id: Extended read FId write FId;
  property name: String read FName write FName;
  property prerelease: Boolean read FPrerelease write FPrerelease;
  property published_at: String read FPublished_at write FPublished_at;
  property tag_name: String read FTag_name write FTag_name;
  property tarball_url: String read FTarball_url write FTarball_url;
  property target_commitish: String read FTarget_commitish write FTarget_commitish;
  property upload_url: String read FUpload_url write FUpload_url;
  property url: String read FUrl write FUrl;
  property zipball_url: String read FZipball_url write FZipball_url;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TReleaseClass;
end;

TGitReleasesClass = class
private
  FReleases: TArray<TReleaseClass>;
public
  property Releases: TArray<TReleaseClass> read FReleases write FReleases;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TGitReleasesClass;
end;

TErrorClass = class
private
  FDocumentation_url: String;
  FMessage: String;
public
  property documentation_url: String read FDocumentation_url write FDocumentation_url;
  property message: String read FMessage write FMessage;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TErrorClass;
end;

implementation

{TUploaderClass}


function TUploaderClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TUploaderClass.FromJsonString(AJsonString: string): TUploaderClass;
begin
  result := TJson.JsonToObject<TUploaderClass>(AJsonString)
end;

{TAssetsClass}

constructor TAssetsClass.Create;
begin
  inherited;
  FUploader := TUploaderClass.Create();
end;

destructor TAssetsClass.Destroy;
begin
  FUploader.free;
  inherited;
end;

function TAssetsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAssetsClass.FromJsonString(AJsonString: string): TAssetsClass;
begin
  result := TJson.JsonToObject<TAssetsClass>(AJsonString)
end;

{TAuthorClass}


function TAuthorClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAuthorClass.FromJsonString(AJsonString: string): TAuthorClass;
begin
  result := TJson.JsonToObject<TAuthorClass>(AJsonString)
end;

{TReleaseClass}

constructor TReleaseClass.Create;
begin
  inherited;
  FAuthor := TAuthorClass.Create();
end;

destructor TReleaseClass.Destroy;
var
  LassetsItem: TAssetsClass;
begin

 for LassetsItem in FAssets do
   LassetsItem.free;

  FAuthor.free;
  inherited;
end;

function TReleaseClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TReleaseClass.FromJsonString(AJsonString: string): TReleaseClass;
begin
  result := TJson.JsonToObject<TReleaseClass>(AJsonString)
end;

{TGitReleasesClass}

constructor TGitReleasesClass.Create;
begin
  inherited;
end;

destructor TGitReleasesClass.Destroy;
var
  LReleasesItem: TReleaseClass;
begin

 for LReleasesItem in FReleases do
   LReleasesItem.free;

  inherited;
end;

function TGitReleasesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGitReleasesClass.FromJsonString(AJsonString: string): TGitReleasesClass;
begin
  result := TJson.JsonToObject<TGitReleasesClass>(AJsonString)
end;


{TErrorClass}

function TErrorClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TErrorClass.FromJsonString(AJsonString: string): TErrorClass;
begin
  result := TJson.JsonToObject<TErrorClass>(AJsonString)
end;

end.


